{
  "rust-analyzer.assist.importGranularity": {
    "markdownDescription": "How imports should be grouped into use statements.",
    "default": "crate",
    "type": "string",
    "enum": [
      "preserve",
      "crate",
      "module",
      "item"
    ],
    "enumDescriptions": [
      "Do not change the granularity of any imports and preserve the original structure written by the developer.",
      "Merge imports from the same crate into a single use statement. Conversely, imports from different crates are split into separate statements.",
      "Merge imports from the same module into a single use statement. Conversely, imports from different modules are split into separate statements.",
      "Flatten imports so that each has its own use statement."
    ]
  },
  "rust-analyzer.assist.importEnforceGranularity": {
    "markdownDescription": "Whether to enforce the import granularity setting for all files. If set to false rust-analyzer will try to keep import styles consistent per file.",
    "default": false,
    "type": "boolean"
  },
  "rust-analyzer.assist.importPrefix": {
    "markdownDescription": "The path structure for newly inserted paths to use.",
    "default": "plain",
    "type": "string",
    "enum": [
      "plain",
      "self",
      "crate"
    ],
    "enumDescriptions": [
      "Insert import paths relative to the current module, using up to one `super` prefix if the parent module contains the requested item.",
      "Insert import paths relative to the current module, using up to one `super` prefix if the parent module contains the requested item. Prefixes `self` in front of the path if it starts with a module.",
      "Force import paths to be absolute by always starting them with `crate` or the extern crate name they come from."
    ]
  },
  "rust-analyzer.assist.importGroup": {
    "markdownDescription": "Group inserted imports by the [following order](https://rust-analyzer.github.io/manual.html#auto-import). Groups are separated by newlines.",
    "default": true,
    "type": "boolean"
  },
  "rust-analyzer.assist.allowMergingIntoGlobImports": {
    "markdownDescription": "Whether to allow import insertion to merge new imports into single path glob imports like `use std::fmt::*;`.",
    "default": true,
    "type": "boolean"
  },
  "rust-analyzer.callInfo.full": {
    "markdownDescription": "Show function name and docs in parameter hints.",
    "default": true,
    "type": "boolean"
  },
  "rust-analyzer.cargo.autoreload": {
    "markdownDescription": "Automatically refresh project info via `cargo metadata` on\n`Cargo.toml` changes.",
    "default": true,
    "type": "boolean"
  },
  "rust-analyzer.cargo.allFeatures": {
    "markdownDescription": "Activate all available features (`--all-features`).",
    "default": false,
    "type": "boolean"
  },
  "rust-analyzer.cargo.unsetTest": {
    "markdownDescription": "Unsets `#[cfg(test)]` for the specified crates.",
    "default": [
      "core"
    ],
    "type": "array",
    "items": {
      "type": "string"
    }
  },
  "rust-analyzer.cargo.features": {
    "markdownDescription": "List of features to activate.",
    "default": [],
    "type": "array",
    "items": {
      "type": "string"
    }
  },
  "rust-analyzer.cargo.runBuildScripts": {
    "markdownDescription": "Run build scripts (`build.rs`) for more precise code analysis.",
    "default": true,
    "type": "boolean"
  },
  "rust-analyzer.cargo.useRustcWrapperForBuildScripts": {
    "markdownDescription": "Use `RUSTC_WRAPPER=rust-analyzer` when running build scripts to\navoid compiling unnecessary things.",
    "default": true,
    "type": "boolean"
  },
  "rust-analyzer.cargo.noDefaultFeatures": {
    "markdownDescription": "Do not activate the `default` feature.",
    "default": false,
    "type": "boolean"
  },
  "rust-analyzer.cargo.target": {
    "markdownDescription": "Compilation target (target triple).",
    "default": null,
    "type": [
      "null",
      "string"
    ]
  },
  "rust-analyzer.cargo.noSysroot": {
    "markdownDescription": "Internal config for debugging, disables loading of sysroot crates.",
    "default": false,
    "type": "boolean"
  },
  "rust-analyzer.checkOnSave.enable": {
    "markdownDescription": "Run specified `cargo check` command for diagnostics on save.",
    "default": true,
    "type": "boolean"
  },
  "rust-analyzer.checkOnSave.allFeatures": {
    "markdownDescription": "Check with all features (`--all-features`).\nDefaults to `#rust-analyzer.cargo.allFeatures#`.",
    "default": null,
    "type": [
      "null",
      "boolean"
    ]
  },
  "rust-analyzer.checkOnSave.allTargets": {
    "markdownDescription": "Check all targets and tests (`--all-targets`).",
    "default": true,
    "type": "boolean"
  },
  "rust-analyzer.checkOnSave.command": {
    "markdownDescription": "Cargo command to use for `cargo check`.",
    "default": "check",
    "type": "string"
  },
  "rust-analyzer.checkOnSave.noDefaultFeatures": {
    "markdownDescription": "Do not activate the `default` feature.",
    "default": null,
    "type": [
      "null",
      "boolean"
    ]
  },
  "rust-analyzer.checkOnSave.target": {
    "markdownDescription": "Check for a specific target. Defaults to\n`#rust-analyzer.cargo.target#`.",
    "default": null,
    "type": [
      "null",
      "string"
    ]
  },
  "rust-analyzer.checkOnSave.extraArgs": {
    "markdownDescription": "Extra arguments for `cargo check`.",
    "default": [],
    "type": "array",
    "items": {
      "type": "string"
    }
  },
  "rust-analyzer.checkOnSave.features": {
    "markdownDescription": "List of features to activate. Defaults to\n`#rust-analyzer.cargo.features#`.",
    "default": null,
    "type": [
      "null",
      "array"
    ],
    "items": {
      "type": "string"
    }
  },
  "rust-analyzer.checkOnSave.overrideCommand": {
    "markdownDescription": "Advanced option, fully override the command rust-analyzer uses for\nchecking. The command should include `--message-format=json` or\nsimilar option.",
    "default": null,
    "type": [
      "null",
      "array"
    ],
    "items": {
      "type": "string"
    }
  },
  "rust-analyzer.completion.addCallArgumentSnippets": {
    "markdownDescription": "Whether to add argument snippets when completing functions.\nOnly applies when `#rust-analyzer.completion.addCallParenthesis#` is set.",
    "default": true,
    "type": "boolean"
  },
  "rust-analyzer.completion.addCallParenthesis": {
    "markdownDescription": "Whether to add parenthesis when completing functions.",
    "default": true,
    "type": "boolean"
  },
  "rust-analyzer.completion.postfix.enable": {
    "markdownDescription": "Whether to show postfix snippets like `dbg`, `if`, `not`, etc.",
    "default": true,
    "type": "boolean"
  },
  "rust-analyzer.completion.autoimport.enable": {
    "markdownDescription": "Toggles the additional completions that automatically add imports when completed.\nNote that your client must specify the `additionalTextEdits` LSP client capability to truly have this feature enabled.",
    "default": true,
    "type": "boolean"
  },
  "rust-analyzer.completion.autoself.enable": {
    "markdownDescription": "Toggles the additional completions that automatically show method calls and field accesses\nwith `self` prefixed to them when inside a method.",
    "default": true,
    "type": "boolean"
  },
  "rust-analyzer.diagnostics.enable": {
    "markdownDescription": "Whether to show native rust-analyzer diagnostics.",
    "default": true,
    "type": "boolean"
  },
  "rust-analyzer.diagnostics.enableExperimental": {
    "markdownDescription": "Whether to show experimental rust-analyzer diagnostics that might\nhave more false positives than usual.",
    "default": true,
    "type": "boolean"
  },
  "rust-analyzer.diagnostics.disabled": {
    "markdownDescription": "List of rust-analyzer diagnostics to disable.",
    "default": [],
    "type": "array",
    "items": {
      "type": "string"
    },
    "uniqueItems": true
  },
  "rust-analyzer.diagnostics.remapPrefix": {
    "markdownDescription": "Map of prefixes to be substituted when parsing diagnostic file paths.\nThis should be the reverse mapping of what is passed to `rustc` as `--remap-path-prefix`.",
    "default": {},
    "type": "object"
  },
  "rust-analyzer.diagnostics.warningsAsHint": {
    "markdownDescription": "List of warnings that should be displayed with hint severity.\n\nThe warnings will be indicated by faded text or three dots in code\nand will not show up in the `Problems Panel`.",
    "default": [],
    "type": "array",
    "items": {
      "type": "string"
    }
  },
  "rust-analyzer.diagnostics.warningsAsInfo": {
    "markdownDescription": "List of warnings that should be displayed with info severity.\n\nThe warnings will be indicated by a blue squiggly underline in code\nand a blue icon in the `Problems Panel`.",
    "default": [],
    "type": "array",
    "items": {
      "type": "string"
    }
  },
  "rust-analyzer.experimental.procAttrMacros": {
    "markdownDescription": "Expand attribute macros.",
    "default": false,
    "type": "boolean"
  },
  "rust-analyzer.files.watcher": {
    "markdownDescription": "Controls file watching implementation.",
    "default": "client",
    "type": "string"
  },
  "rust-analyzer.files.excludeDirs": {
    "markdownDescription": "These directories will be ignored by rust-analyzer. They are\nrelative to the workspace root, and globs are not supported. You may\nalso need to add the folders to Code's `files.watcherExclude`.",
    "default": [],
    "type": "array",
    "items": {
      "type": "string"
    }
  },
  "rust-analyzer.highlightRelated.references": {
    "markdownDescription": "Enables highlighting of related references while hovering your mouse above any identifier.",
    "default": true,
    "type": "boolean"
  },
  "rust-analyzer.highlightRelated.exitPoints": {
    "markdownDescription": "Enables highlighting of all exit points while hovering your mouse above any `return`, `?`, or return type arrow (`->`).",
    "default": true,
    "type": "boolean"
  },
  "rust-analyzer.highlightRelated.breakPoints": {
    "markdownDescription": "Enables highlighting of related references while hovering your mouse `break`, `loop`, `while`, or `for` keywords.",
    "default": true,
    "type": "boolean"
  },
  "rust-analyzer.highlightRelated.yieldPoints": {
    "markdownDescription": "Enables highlighting of all break points for a loop or block context while hovering your mouse above any `async` or `await` keywords.",
    "default": true,
    "type": "boolean"
  },
  "rust-analyzer.highlighting.strings": {
    "markdownDescription": "Use semantic tokens for strings.\n\nIn some editors (e.g. vscode) semantic tokens override other highlighting grammars.\nBy disabling semantic tokens for strings, other grammars can be used to highlight\ntheir contents.",
    "default": true,
    "type": "boolean"
  },
  "rust-analyzer.hover.documentation": {
    "markdownDescription": "Whether to show documentation on hover.",
    "default": true,
    "type": "boolean"
  },
  "rust-analyzer.hover.linksInHover": {
    "markdownDescription": "Use markdown syntax for links in hover.",
    "default": true,
    "type": "boolean"
  },
  "rust-analyzer.hoverActions.debug": {
    "markdownDescription": "Whether to show `Debug` action. Only applies when\n`#rust-analyzer.hoverActions.enable#` is set.",
    "default": true,
    "type": "boolean"
  },
  "rust-analyzer.hoverActions.enable": {
    "markdownDescription": "Whether to show HoverActions in Rust files.",
    "default": true,
    "type": "boolean"
  },
  "rust-analyzer.hoverActions.gotoTypeDef": {
    "markdownDescription": "Whether to show `Go to Type Definition` action. Only applies when\n`#rust-analyzer.hoverActions.enable#` is set.",
    "default": true,
    "type": "boolean"
  },
  "rust-analyzer.hoverActions.implementations": {
    "markdownDescription": "Whether to show `Implementations` action. Only applies when\n`#rust-analyzer.hoverActions.enable#` is set.",
    "default": true,
    "type": "boolean"
  },
  "rust-analyzer.hoverActions.references": {
    "markdownDescription": "Whether to show `References` action. Only applies when\n`#rust-analyzer.hoverActions.enable#` is set.",
    "default": false,
    "type": "boolean"
  },
  "rust-analyzer.hoverActions.run": {
    "markdownDescription": "Whether to show `Run` action. Only applies when\n`#rust-analyzer.hoverActions.enable#` is set.",
    "default": true,
    "type": "boolean"
  },
  "rust-analyzer.inlayHints.chainingHints": {
    "markdownDescription": "Whether to show inlay type hints for method chains.",
    "default": true,
    "type": "boolean"
  },
  "rust-analyzer.inlayHints.maxLength": {
    "markdownDescription": "Maximum length for inlay hints. Set to null to have an unlimited length.",
    "default": 25,
    "type": [
      "null",
      "integer"
    ],
    "minimum": 0
  },
  "rust-analyzer.inlayHints.parameterHints": {
    "markdownDescription": "Whether to show function parameter name inlay hints at the call\nsite.",
    "default": true,
    "type": "boolean"
  },
  "rust-analyzer.inlayHints.typeHints": {
    "markdownDescription": "Whether to show inlay type hints for variables.",
    "default": true,
    "type": "boolean"
  },
  "rust-analyzer.joinLines.joinElseIf": {
    "markdownDescription": "Join lines inserts else between consecutive ifs.",
    "default": true,
    "type": "boolean"
  },
  "rust-analyzer.joinLines.removeTrailingComma": {
    "markdownDescription": "Join lines removes trailing commas.",
    "default": true,
    "type": "boolean"
  },
  "rust-analyzer.joinLines.unwrapTrivialBlock": {
    "markdownDescription": "Join lines unwraps trivial blocks.",
    "default": true,
    "type": "boolean"
  },
  "rust-analyzer.joinLines.joinAssignments": {
    "markdownDescription": "Join lines merges consecutive declaration and initialization of an assignment.",
    "default": true,
    "type": "boolean"
  },
  "rust-analyzer.lens.debug": {
    "markdownDescription": "Whether to show `Debug` lens. Only applies when\n`#rust-analyzer.lens.enable#` is set.",
    "default": true,
    "type": "boolean"
  },
  "rust-analyzer.lens.enable": {
    "markdownDescription": "Whether to show CodeLens in Rust files.",
    "default": true,
    "type": "boolean"
  },
  "rust-analyzer.lens.implementations": {
    "markdownDescription": "Whether to show `Implementations` lens. Only applies when\n`#rust-analyzer.lens.enable#` is set.",
    "default": true,
    "type": "boolean"
  },
  "rust-analyzer.lens.run": {
    "markdownDescription": "Whether to show `Run` lens. Only applies when\n`#rust-analyzer.lens.enable#` is set.",
    "default": true,
    "type": "boolean"
  },
  "rust-analyzer.lens.methodReferences": {
    "markdownDescription": "Whether to show `Method References` lens. Only applies when\n`#rust-analyzer.lens.enable#` is set.",
    "default": false,
    "type": "boolean"
  },
  "rust-analyzer.lens.references": {
    "markdownDescription": "Whether to show `References` lens. Only applies when\n`#rust-analyzer.lens.enable#` is set.",
    "default": false,
    "type": "boolean"
  },
  "rust-analyzer.lens.forceCustomCommands": {
    "markdownDescription": "Internal config: use custom client-side commands even when the\nclient doesn't set the corresponding capability.",
    "default": true,
    "type": "boolean"
  },
  "rust-analyzer.linkedProjects": {
    "markdownDescription": "Disable project auto-discovery in favor of explicitly specified set\nof projects.\n\nElements must be paths pointing to `Cargo.toml`,\n`rust-project.json`, or JSON objects in `rust-project.json` format.",
    "default": [],
    "type": "array",
    "items": {
      "type": [
        "string",
        "object"
      ]
    }
  },
  "rust-analyzer.lruCapacity": {
    "markdownDescription": "Number of syntax trees rust-analyzer keeps in memory. Defaults to 128.",
    "default": null,
    "type": [
      "null",
      "integer"
    ],
    "minimum": 0
  },
  "rust-analyzer.notifications.cargoTomlNotFound": {
    "markdownDescription": "Whether to show `can't find Cargo.toml` error message.",
    "default": true,
    "type": "boolean"
  },
  "rust-analyzer.procMacro.enable": {
    "markdownDescription": "Enable support for procedural macros, implies `#rust-analyzer.cargo.runBuildScripts#`.",
    "default": true,
    "type": "boolean"
  },
  "rust-analyzer.procMacro.server": {
    "markdownDescription": "Internal config, path to proc-macro server executable (typically,\nthis is rust-analyzer itself, but we override this in tests).",
    "default": null,
    "type": [
      "null",
      "string"
    ]
  },
  "rust-analyzer.runnables.overrideCargo": {
    "markdownDescription": "Command to be executed instead of 'cargo' for runnables.",
    "default": null,
    "type": [
      "null",
      "string"
    ]
  },
  "rust-analyzer.runnables.cargoExtraArgs": {
    "markdownDescription": "Additional arguments to be passed to cargo for runnables such as\ntests or binaries. For example, it may be `--release`.",
    "default": [],
    "type": "array",
    "items": {
      "type": "string"
    }
  },
  "rust-analyzer.rustcSource": {
    "markdownDescription": "Path to the Cargo.toml of the rust compiler workspace, for usage in rustc_private\nprojects, or \"discover\" to try to automatically find it.\n\nAny project which uses rust-analyzer with the rustcPrivate\ncrates must set `[package.metadata.rust-analyzer] rustc_private=true` to use it.\n\nThis option is not reloaded automatically; you must restart rust-analyzer for it to take effect.",
    "default": null,
    "type": [
      "null",
      "string"
    ]
  },
  "rust-analyzer.rustfmt.extraArgs": {
    "markdownDescription": "Additional arguments to `rustfmt`.",
    "default": [],
    "type": "array",
    "items": {
      "type": "string"
    }
  },
  "rust-analyzer.rustfmt.overrideCommand": {
    "markdownDescription": "Advanced option, fully override the command rust-analyzer uses for\nformatting.",
    "default": null,
    "type": [
      "null",
      "array"
    ],
    "items": {
      "type": "string"
    }
  },
  "rust-analyzer.rustfmt.enableRangeFormatting": {
    "markdownDescription": "Enables the use of rustfmt's unstable range formatting command for the\n`textDocument/rangeFormatting` request. The rustfmt option is unstable and only\navailable on a nightly build.",
    "default": false,
    "type": "boolean"
  },
  "rust-analyzer.workspace.symbol.search.scope": {
    "markdownDescription": "Workspace symbol search scope.",
    "default": "workspace",
    "type": "string",
    "enum": [
      "workspace",
      "workspace_and_dependencies"
    ],
    "enumDescriptions": [
      "Search in current workspace only",
      "Search in current workspace and dependencies"
    ]
  },
  "rust-analyzer.workspace.symbol.search.kind": {
    "markdownDescription": "Workspace symbol search kind.",
    "default": "only_types",
    "type": "string",
    "enum": [
      "only_types",
      "all_symbols"
    ],
    "enumDescriptions": [
      "Search for types only",
      "Search for all symbols kinds"
    ]
  }
}
